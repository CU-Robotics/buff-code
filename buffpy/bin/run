#! /usr/bin/env python
"""
		Launcher 
 	This is the main script for all CV 
	operations. The script reads in a
	config file that describes the pipeline
	and then launches the defined targets.

"""

import os 
import sys
import time
import yaml
import rospy
import signal
import roslaunch
import subprocess as sb

def load_config(file='mds_pipeline'):
	if not os.path.exists(file):
		print('Could not find config: checking for scripts...')
		return None
	with open(file, 'r') as f:
		return yaml.safe_load(f)

def main(args):
	"""
		Launch all relevant processes. (could be replaced with roslaunch)
	"""

	# Initialize config as None
	config = None
	# Initialize the script mode as false
	from_script = False

	# Get the program file name and directory
	target = args[1]
	fileName = args[0]
	binPath = os.path.dirname(fileName)
	projectRoot = os.getenv('PROJECT_ROOT')

	if len(args) > 1:
		configFile = os.path.join(projectRoot, 'config', 'lib', '{}.yaml'.format(target))
		print('Loading {}'.format(configFile))
		config = load_config(configFile)
	else:
		print('No args: Exiting...')
		exit(0)

	if config is None:
		# add functionality to run a single script without a config

		# scripts = glob.glob(os.path.join(projectRoot, 'buffpy', 'lib'))
		# for script in scripts:
		# 	if script == target:
		# 		from_script = os.path.join(projectRoot, 'buffpy', 'lib', script)
		# just exit for now
		exit(0)


	coreProc = sb.Popen('roscore', stdout=sb.PIPE, stderr=sb.PIPE)

	launch = roslaunch.scriptapi.ROSLaunch()
	launch.start()

	processes = []
	nodes = config['NODES']
	package = config['PACKAGE']

	try:
		# load and launch each node in the config
		for node in nodes:
			process = roslaunch.core.Node(package, nodes[node], args=configFile)
			processes.append(launch.launch(process))

		# wait for core process to finish or err out
		while coreProc.poll() is None:
			# if output/errors print them
			mesg = coreProc.communicate()
			if mesg[0]:
				print(mesg[0].decode('utf-8'))
			if mesg[1]:
				print(mesg[1].decode('utf-8'))

		# core finished so kill any other processes
		for proc in processes:
			proc.stop()

	except KeyboardInterrupt as e:
		print(e)
		print('Terminate Recieved:...')
		# Kill all launched processes
		for proc in processes:
			proc.stop()

		# Kill roscore
		os.kill(coreProc.pid, signal.SIGTERM)

	print('RUN finished')
		

if __name__ == '__main__':
	main(sys.argv)