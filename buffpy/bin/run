#! /usr/bin/env python3
"""
		Odyssy Launch Platform
 	This is the main script for all CV 
	operations. The script reads in a
	config file that describes the pipeline
	and then launches the defined targets.

"""
"""
	Project: Odyssey Launch Platform
	Author: Mitchell D Scott
	Description:
	  This is a python3 command line tool from CU Robotics.
	Use this script to spawn systems. Systems are defined as
	yaml files in buffpy/config/lib. A system consists of a 
	setof ROS nodes and the topics that link them. A system may
	also include data files (yaml) to configure nodes. Nodes
	do not accept arguments, everything needs to be passed 
	through the ROS-param server.

	  The goal is to eliminate the overhead of using launch files.
	This script is also designed to make the migration to ROS2 and
	python3 as easy as possible (hope this happens soon). Another
	benefit of this method is the ability to deploy the same source
	to a variety of robots. All robots launch code the same way but
	by importing different system yamls or data yamls the overall
	systems can vary dramatically.

	TODO:
	  - Wait until the migration for major developments

	NOTES:
		It's been awhile, I'll get back to you
"""

import os 
import sys
import time
import yaml
import rospy
import signal
import roslaunch
import subprocess as sb


def overwrite_conf(a, b):
	"""
		Overwrite a parent yamls data
		with the data of it's child
		PARAMS:
			a: dict (from pyyaml), the child
			b: dict (from pyyaml), the parent
		RETURNS:
			b: dict, overwrite result
	"""
	for item in a:
		# Handle lists
		if type(a[item]) is list:
			if not item in b:
				b[item] = [] # initialize

			for n in a[item]:
				b[item].append(n) # add item

		elif type(a[item]) is dict: # recurse on dictionary
			if item in b:
				b[item] = overwrite_conf(a[item], b[item])

			else:
				b[item] = a[item]

		else:	# insert string or number
			b[item] = a[item]

	return b

def load_config(file):
	"""
		Loda the target system config file.
		Now featuring recursive inheritance!
		PARAMS:
			file: The overwriting conf data
		RETURNS:
			case 0: empty dictionary
			case 1: the parent data (dict)
			case 2: the parent updated with the child (dict)
	"""
	if not os.path.exists(file):
		print('Could not find config: ...')
		return {}

	with open(file, 'r') as f:
		data = yaml.safe_load(f)

	if 'FROM' in data:
		parent = os.path.join(os.getenv('PROJECT_ROOT'), 'buffpy', 'config', 'lib', data['FROM'])
		parentData = load_config(file=parent)

		data = overwrite_conf(data, parentData)

	return data

def parse_target(args, projectRoot):
	""" 
		Get target_path and config if they exist, all
		input checking debugging gets done here before launch
		PARAMS:
			args: list of strings, [file, args] args can be None
			projectRoot: filepath, root of the project
		RETURN:
			target_path: filepath, the target (yaml or py)
			target_args: args for a python script
			config: config data (dict), config for a system
	"""
	config = None 
	target_args = []
	target_path = None

	if len(args) > 1: 	# make sure theres at least 2 args
		target = args[1]

		if target[-3:] == '.py':	# if arg1 is a python script set the target path
			print('Loading Python3 Script:...')
			config = 'python'		# so we know its python
			target_path = os.path.join(projectRoot, 'buffpy', 'lib', target)
			
			if len(args) > 2:
				target_args = args[2:]
				print(f'Found args {target_args}')

		if target[-5:] == '.yaml':	# if target is a yaml file set config
			print('Loading ROS System:...')
			target_path = os.path.join(projectRoot, 'buffpy', 'config', 'lib', target)
			config = load_config(target_path)	# None if no config

			if config is None:
				print(f'No config data in {target_path}')

	if not os.path.exists(target_path):
		print(f'Target path not found {target_path}')
		return None, [], None

	print(f'Targeting: {target_path}, {target_args}')

	return target_path, target_args, config

def launch_system(target_path, config):
	"""
		This wil launch all nodes and roscore. 
		launches core process with subprocess.Popen 
		systems are launched with the usage below
		rosrun package program args=[debug, config, topics...]
		PARAMS:
			target_path: filepath, to yaml
			config: load configuration (dict)
		RETURNS:
			core_process: subprocess obj, the core process
			pool: list of roslaunch processes
	"""
	
	pool = []	
	cmd = 'roscore'
	core_process = None
		
	# Set nodes and package
	nodes = config['NODES']

	print(f'System Definition:\n{yaml.dump(config, allow_unicode=True, default_flow_style=False)}\n')

	# Cant spawn pool without nodes
	if nodes is None:
		print(f'Missing NODES in config file {target}')

	else:
		namespace = '/buffbot'

		# launch core
		core_process = sb.Popen(cmd, stdout=sb.PIPE, stderr=sb.PIPE)

		launch = roslaunch.scriptapi.ROSLaunch()
		launch.start()

		rospy.set_param(f'{namespace}/DEBUG', config['DEBUG'])
		rospy.set_param(f'{namespace}/TOPICS', config['TOPICS'])

		# load and launch each node in the config
		for name in nodes:
			node = config['NODES'][name]

			# If missing package type or filename skip
			if not 'PACKAGE' in node or not 'FILE' in node:
				rospy.logerr(f'{node} Has an invalid definition')
				continue

			program = node['FILE']
			package = node['PACKAGE']

			# Not all packages handle our launch params
			if package == 'buffpy':
				# only arg needed is the node name, everything else is under the node name on the param server
				args = f'{namespace}/{name}'

				if 'CONFIG' in node and node['CONFIG'] is None:
					node.pop('CONFIG')

				elif 'CONFIG' in node:
					with open(os.path.join(os.getenv('PROJECT_ROOT'), 'buffpy', 'config', 'lib', node['CONFIG']), 'r') as f:
						data = yaml.safe_load(f)
						if not data is None:
							node.update(data) # Add the programs config to its run config


				rospy.set_param(args, node)

			elif 'ARGS' in node:
				# can use args tag to send args to non-buffpy packages
				args = ' '.join(node['ARGS'])

			else:
				# no args passed
				args = ''

			if 'REQUIRED' in node:
				required = True

			else:
				required = False

			# launch the process and add it to the pool
			process = roslaunch.core.Node(package, program, args=args, respawn=False, output='screen', required=required)
			pool.append(launch.launch(process))

	return core_process, pool, launch

def launch_python(target_path, target_args):
	"""
		Runs a python script It starts by building a 
		cmd for the core process and then runs the 
		command with subprocess.Popen 
		PARAMS:
			target_path: filepath, to python script
			target_args: list of strings, args for the command (can be empty)
		RETURNS:
			core_process: subprocess obj, the core process
			pool: empty list
	"""

	# run a single script without a config
	cmd = ['python3', target_path] + target_args
	print(f'Targeting:\n\t{cmd}')
	core_process = sb.Popen(cmd, stdout=sb.PIPE, stderr=sb.PIPE)

	return core_process

def spin(config, target_path, target_args):
	"""
		initialize the run and launch
		loop and wait for user kill or core to finish
		PARAMS:
			config: a python script or system config file (yaml)
			target_path: the targetfile to launch or roscore
			target_args: arguments for the target file
	"""

	# target path is essential for launching. If it is empty
	# there was an error and the program should exit
	if target_path is None:
		print(f'Failed to load target: {target_path}')
		exit(0)

	core_process = None
	# Try to catch user kill and other errors
	try: 
		# launch the pool
		if config == 'python':
			core_process = launch_python(target_path, target_args)
		elif not config is None:
			core_process, pool, launch = launch_system(target_path, config)
		else:
			print('Config Empty: Exiting...')
			exit(0)
		# core_process is the core process we are trying to spawn (python script or roscore)
		# if it fails there is no point in spinning
		if core_process is None: 
			print('Launching target core failed :(')
			exit(0)

		# this hanldes user kill (available after spawn & in the run space below)
		# this will loop until an interrupt or the core dies.
		while core_process.poll() is None:
			# if output/errors print them
			mesg = core_process.communicate()
			if mesg[0]:
				print(mesg[0].decode('utf-8')) # this will force us to use rospy.log to print info I think
			if mesg[1]:
				print(mesg[1].decode('utf-8')) # output is sent from program to roscore then printed here

		# core finished so kill any other pool
		# # supposedly handled by roslaunch but I wanted to be safe
		# for proc in pool:
		# 	proc.stop()

	except KeyboardInterrupt as e:
		print(e)
		print('Terminate Recieved:...')
		# Kill all launched pool
		# for proc in pool:
		# 	proc.stop()

		# Kill core
		os.kill(core_process.pid, signal.SIGTERM)

	except Exception as e:
		# In event of an error kill the core
		os.kill(core_process.pid, signal.SIGTERM)
		print(e)
		print('Killed due to error')

def main(args):
	"""
		Launch all relevant pool.
		See wiki for input usage
	"""

	# list of roslaunch pool, empty when running python
	pool = []
	config = None # Initialize config as None
	launch = None
	fileName = args[0]	# program file name is always the first arg
	binPath = os.path.dirname(fileName) # path to buffpy/bin
	projectRoot = os.getenv('PROJECT_ROOT')	# path to project root

	# parse the input 
	target_path, target_args, config = parse_target(args, projectRoot)

	# spin till finished
	spin(config, target_path, target_args) 

	print('RUN finished')
		

if __name__ == '__main__':
	main(sys.argv)
