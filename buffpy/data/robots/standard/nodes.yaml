##############################
#
#
#       The Buff-Stuff  
#
#
##############################

robot_type: standard

# Specify our nodes from buffpy/lib
# spinup perception and comms here
buff-nodes:
  # buff_rust:
  #   files: [comms_node]
  buffnet:
    # sudo: True
    files: [demo_ros_stream.py, buffnet]

# Examle of includig ros
# Maybe some kind of option to shut this down via cmdline
#ros-nodes:
#   rqt_plot:
#     files: [rqt_plot]
#     package: rqt_plot

# The Teensy... Ti-ta-ti-ti-ta-ti-ti-ta-ta-ta-la-ba-ba-ba-ba-ba-da-la-ba-ba-ba-ba-da-la-ba-ba-baa, Ti-ta-ti-li-ta-ti-li-ti-taa, Ti-ta-ti-li... /*o*)/ (gasps) Ti-ta-ti-li-ta-ti-li-ta-ti-li-ta-ti-li-ta-ti-li-ti-ta-ti-ti-ta-ti-ti-taaaaaâ™ª PEPARING THE KRABBY PATTY!
teensy_vid: 0x16C0
teensy_pid: 0x0486

# Defines the sensor index for
# HID packets. String is the topic
sensor_index:
  - lsm6dsox
  - icm20649
  - dr16
  - refsys
  - revEnc

# So HID knows what size buffer
sensor_buffers:
  - 9
  - 6
  - 7
  - 8
  - 4

sensor_config:
  - [0.0]
  - [0.0]
  - [0.0]
  - [0.0]
  # rev encoders [offset1, filter_gain1, offset2, filter_gain2, offset3, filter_gain3...]
  - [0.0, 0.0, 300.0, 0.99, 0.0, 0.0, 0.0, 0.0] # filter gains helps smooth any glitches

##############################
#
#
#       RM CAN Interface  
#
#
##############################

# This defines the indices of all the motors
# on the CAN bus (index = row, starts at zero)
motor_index:
  - yp_drive    # V0 chassis motor in the positive y axis
  - xp_drive    # V1 chassis motor in the positive x axis
  - yn_drive    # V2 chassis motor in the negative y axis
  - xn_drive    # V3 chassis motor in the negative x axis
  - pitch       # V4
  - yaw_1       # V5
  - yaw_2       # V6

#   Uses the motor indices to determine a can output packet index and device return value.
# Once this is configured properly CAN protocol should be abstracted into motor_<op>(index, *args),
# this behavior will be available system wide.
# [can bus, esc type, esc id] see datasheets if you don't understand
motor_can_index:
  - [1, 1, 7]    # V0
  - [1, 1, 3]    # V1
  - [1, 1, 2]    # V2
  - [1, 1, 1]    # V3
  - [2, 1, 1]    # V4
  - [1, 1, 5]    # V5
  - [1, 1, 6]    # V6

##############################
#
#
#         Controllers
#
#
##############################

#
#     Kinematic Transforms
#
#   These transforms are used to convert a control input into motor references [[angle; speed]: n],
# or sensor feedback into a state estimate [x,y,theta,phi,psi,gamma] (inverse, forward).
# Motor controls are a linear combo of the state and reference: U = Nr - Kx
# reference comes from a control input (user/hybrid/auto)
# states come from the various onboard sensors & estimators.

#   Inverse
# robot state control input (speeds)                                motor speeds
# [Vx, Vy, Omega, dPitch, dYaw1, dYaw2, dFeeder, dShooter] -> [V0, V1, V2, V3, V4, V5, V6, V7, V8]
inverse_kinematics: 
  - [ -1.0,    0.0,   -1.0,    0.0,    0.0,    0.0,    0.0] # V0 = -Vx - omega
  - [  0.0,    1.0,   -1.0,    0.0,    0.0,    0.0,    0.0] # V1 =  Vy - omega
  - [  1.0,    0.0,   -1.0,    0.0,    0.0,    0.0,    0.0] # V2 =  Vx - omega
  - [  0.0,   -1.0,   -1.0,    0.0,    0.0,    0.0,    0.0] # V3 = -Vy - omega
  - [  0.0,    0.0,    0.0,   -1.0,    0.0,    0.0,    0.0] # V4 = dPitch
  - [  0.0,    0.0,  -0.24,    0.0,    1.0,    0.0,    0.0] # V4 = dYaw - omega

#   Forward
# Used by encoder estimator (kee)
# [V0, V1, V2, V3, V4, V5, V6, V7, V8] -> [Vx, Vy, Omega, dPitch, dYaw, dFeeder, dShooter]
forward_kinematics: 
  - [ -0.5,    0.0,    0.5,    0.0,    0.0,    0.0]  # Vx = (-V0 + V2) / 2 # average X speed
  - [  0.0,    0.5,    0.0,   -0.5,    0.0,    0.0]  # Vy = (V1 - V3) / 2
  - [-0.25,  -0.25,  -0.25,  -0.25,    0.0,    0.0]  # Omega = -mean(V[0:4]) # average of all wheel speeds
  - [  0.0,    0.0,    0.0,    0.0,   -1.0,    0.0]  # dPitch = V4
  - [ -0.6,   -0.6,   -0.6,   -0.6,    0.0,    1.0]  # dYaw = -mean(V[0:4]) + V5 # (V5 + V6) / 2 when the secon motor is on
  - [  0.0,    0.0,    0.0,    0.0,    0.0,    0.0]  # dFeeder = 0
  - [  0.0,    0.0,    0.0,    0.0,    0.0,    0.0]  # dShooter = 0

#
#     Motor Controllers
#
#   Information to control the operation of 
# on board motors. The goal of these vectors
# is to track the motor references faster than
# they can update.

#    Motor Controlelr Types
#   Motor controllers will set their third feedback term to either a system power value or a
# gravitational offset. The idea is we can efficiently conrol and reconfig a system invovling
# power sensitive actuation and inverse pendulum like linkages.
# 0 = power, 1 = pendulum (more coming soon...)
motor_controller_types:
  - [0]
  - [0]
  - [0]
  - [0]
  - [1]
  - [0]


#    Motor Controller Gains
#   Motor gains are multiplied by the motor feedback to produce a control signal. The control law
# this imposes on the system is 
#     ui = K[i] * ([ref_angle; ref_speed; 0] - [angle_fb; speed_fb; Fpow/pend])
#
# where K[i] is the ith row (1x3) and '*' is a vector inner product ((1x3)(3x1)).
#         Kp,         Kd,   (Kpow/Kpend) # Motor the output is routed to
  # sys id gains for motor 0
  # [0.000721, 0.007391, 0.000223] <mds>
  # [-0.000005, 0.007399, 0.000065] (less position) <mds>
  # [-0.000179, 0.015793, -0.001859] (grounded) <mds>

  # sys id gains for motor 1
  # [0.000727, 0.007349, 0.000109] <mds>
  # [-0.000060, 0.007432, 0.000132] (less position) <mds>
  # [0.000021, 0.006664, 0.000040] (grounded) <mds>

  #sys id gains for motor 2
  # [-0.000025, 0.007253, 0.000138] (less position) <mds>
  # [0.000623, 0.014526, -0.001268] (grounded) <mds>

  # sys id gains for motor 3
  # [0.000029, 0.007231, 0.000348] (less position) <mds>
  # [-0.000541, 0.006742, -0.001930] (grounded) <mds>
motor_gains: 
  - [0.0, 0.005, 0.0]       # motor 0 
  - [0.0, 0.005, 0.0]       # motor 1 
  - [0.0, 0.005, 0.0]       # motor 2 
  - [0.0, 0.005, 0.0]       # motor 3 
  - [0.3, 0.015, 0.05]      # motor 4 
  - [0.0, 0.002, 0.0]       # motor 5

motor_filters:
  - [0.5]
  - [0.5]
  - [0.5]
  - [0.5]
  - [0.8]
  - [0.5]

#    Motor output Limits
#   All our actuators are continous DC motors. All of the outputs are in terms of radians.
# We can set limits on the output by limiting our input. The reference for the ith motor's 
# controller is bounded by row i. This is not sufficient to gaurantee the motor will not 
# leave these boundaries. The boundaries are valid IFF The closed loop system is stable => bounded(r) -> bounded(y).
# Set the low boundary greater or equal to the high boundary to disable the limit check.
#   [ low roll over limit, high roll over limit, low angle, high angle] # read these value from the ros feedback while manually moving linkages
motor_limits:
  - [0.0, 0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0, 0.0]
  - [0.1, 0.8, 0.0, 0.0]
  - [0.0, 0.0, 0.0, 0.0]