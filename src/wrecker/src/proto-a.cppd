#include <Arduino.h>
#include <FlexCAN_T4.h>

#include "state/state.h"
#include "state/config.h"

#include "drivers/dr16.h"
#include "drivers/ref_system.h"
#include "drivers/serial_interface.h"


// CAN
FlexCAN_T4<CAN1, RX_SIZE_256, TX_SIZE_16> can1;
FlexCAN_T4<CAN2, RX_SIZE_256, TX_SIZE_16> can2;
FlexCAN_T4<CAN3, RX_SIZE_256, TX_SIZE_16> can3;
CAN_message_t canRecieveMessages[3][11];
CAN_message_t tempMessage;
int CANTimer = 0;

// Loop timing
unsigned long deltaT = 5000;
unsigned long lastTime = 0;
unsigned long dumpRate = 2000000; // 2 sec
IntervalTimer serialDumpTmr;

// State
S_Robot robot_state;
C_Robot robot_config;

// Devices
dr16 reciever;
Ref_System refSys;

void dump(){
  dump_Robot(&robot_config, &robot_state);
}

// Runs once
void setup() {
  Serial.begin(1000000);
  delay(1000);
  Serial.println("-- INFANTRY ROBOT START --");

  // Hardware setup
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);

  can1.begin();
  can2.begin();

  can1.setBaudRate(1000000);
  can2.setBaudRate(1000000);

  // Driver setup
  //refSys.init(&robot_state.refSystem);
  reciever.init(&robot_state.driverInput);
}


// Runs continuously
void loop() {
  // Necesary for motors to recieve data over CAN
  while (can1.read(tempMessage))
    canRecieveMessages[0][tempMessage.id - 0x201] = tempMessage;
  while (can2.read(tempMessage))
    canRecieveMessages[1][tempMessage.id - 0x201] = tempMessage;

  //refSys.read_serial();

  // Update devices
  reciever.update();


  // START PROTOTYPE CODE


  // END PROTOTYPE CODE


  // Send CAN every 5000 microseconds
  CANTimer += deltaT;
  if (CANTimer >= 5000) {
    sendC6x0();
    sendGM6020();
    CANTimer = 0;
  }

  // Loop manager: keep this at the bottom. DO NOT MODIFY.
  deltaT = micros() - lastTime;

  while (deltaT < 1000) // 1 ms
    deltaT = micros() - lastTime;
  
  lastTime = micros();
}

